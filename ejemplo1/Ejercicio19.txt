'semantic_map' es un mapa asociativo, en este caso se crea una clave (int) y un valor (en este caso Object
del struct Object(id, timestamp)).
semantic_map.insert(std::make_pair(0,Object{0, 45}) y semantic_map.insert(std::make_pair(1,Object{1, 3}) está
insertando en el mapa una llave 0, Object(id= 0, timestamp = 45) y una llave 1, Object(id = 1, timesamp = 3).
Lo siguiente que hace el código es crear una variable 'removable' del tipo auto, donde guarda un semantic_map y
empieza a filtrar por su valor, es decir, desecha la clave, y su vez filtra según un lambda donde se queda
con los objetos (o-> Object) cuyo timestamp es mayor a 5.
auto removable = semantic_map | std::views::values | std::views::filter([p = params](auto o) { return o.timestamp > 5; });
for (const auto r: removable)
    semantic_map.erase(r.id);
Por último recorre removable, y borra del semantic_map las entradas que coincidan con r.id, es decir, que elimina
del semantic_map, las entradas de los objetos que ha filtrado en el lambda.