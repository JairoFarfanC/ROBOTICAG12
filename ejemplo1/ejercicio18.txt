En primer lugar declaramos la cabecera <algorithm> que contiene algoritmos genéricos que funcionan
con cualquier contendeor(como std::vector, std::list, std::transform...) a través de iteradores, como
ya hemos visto en ejercicios anteriores como en el 15.

Este ejercicio trata sobre convertir un vector de strings, a un vector de enteros, donde cada entero es
la suma de los valores ASCII de los caracteres de la cadena.

std::transform requiere de inicio de contenedor de origen, final de contenedor de origen, inicio de
contenedor destino y función lambda que se aplica a cada elemento. Es decir:
  *vs.begin(), vs.end()-> Es el rango de entrada: Son todos los elementos de vs.
  *vi.begin()-> Es donde empezará a a guardarse el resultado
  *[](const std::string &s{...})-> Función lambda que se aplicará a cada elemento.

Lo que hace la función lambda es lo siguiente:
  1. Por cada llamada a la función lambda, 's' recibe uno de los elementos de 'vs', el contenedor de origen.
  2. 's' tiene un string en este caso, cada string se recorre con un for y se guarda el carácter en 'c' que
     es del tipo unisgned char.
  3. Vamos acumulando el valor ASCII de cada uno de los carácteres del string.

Por último se muestran los resultados, almacenados en el contenedor destino.