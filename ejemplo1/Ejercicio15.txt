Para este ejercicio hemos probado diferentes contenedores de la STL (std::vector<int> y std::map<int,int>)
y algoritmos (sort, min_elemnt, shuflle, copia del vector) midiendo el tiempo de ejecución con la librería <chrono>.

Debido a las limitaciones de memoria ram hemos optado por crear un vector de un millón de elementos, los resultados son:

        Vector (1’000’000 elementos)

        Operación	Tiempo
        sort	328 ms
        min_element	13.8 ms
        shuffle	84 ms
        copy	2 ms

        Map (1’000’000 elementos)

        Operación	Tiempo
        insert 1’000’000 elementos	822 ms
        find 100’000 elementos	35 ms

Sacamos algo en claro, insertar elementos en map es más lento que ordenar un vector, ya que cada insercción tiene
complejidad O(log n) en un árbol, sin embargo la búsqueda de claves con find, es mucho más rápida y eficiente,
demostando la ventaja de los mapas para acceso por clave.
Por tanto, se demuestra que las operaciones secuenciales son más rápidas en vecotres (sort -> O(nlogn); min_element
y shuflle -> O(n)), pero las operaciones basadas en clave (búsqueda) se benefician de la estructura de mapas.